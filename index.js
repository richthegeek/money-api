// Generated by CoffeeScript 1.6.3
(function() {
  var api_key, api_limit, client, description, disclaimer, http, license, path, port, q, restify, server, ttl;

  port = process.env.MONEY_PORT || process.env.PORT;

  api_key = process.env.MONEY_KEY;

  api_limit = 1000;

  if ((port == null) || isNaN(port)) {
    console.log('Envvar MONEY_PORT must be set and be numeric');
    process.exit(0);
  }

  if (api_key == null) {
    console.log('Envvar MONEY_KEY must be set to your openexchangerates API key');
    process.exit(0);
  }

  ttl = Math.ceil((60 * 60 * 24 * 31) / api_limit);

  description = "A simple API for converting between two currencies. This is a simple caching wrapper around the data provided by http://openexchangerates.org/ with data updated every " + ttl + " seconds.";

  disclaimer = "Exchange rates are provided for informational purposes only, and do not constitute financial advice of any kind. Although every attempt is made to ensure quality, NO guarantees are given whatsoever of accuracy, validity, availability, or fitness for any purpose - please use at your own risk. All usage is subject to your acceptance of the Terms and Conditions of Service, available at: https://openexchangerates.org/terms/";

  license = "Data sourced from various providers with public-facing APIs; copyright may apply; resale is prohibited; no warranties given of any kind. All usage is subject to your acceptance of the License Agreement available at: https://openexchangerates.org/license/";

  http = require('http');

  http.globalAgent.maxSockets = 64;

  q = require('q');

  restify = require('restify');

  server = restify.createServer();

  client = restify.createJsonClient({
    url: 'http://openexchangerates.org'
  });

  path = '/api/latest.json?app_id=' + api_key;

  (function() {
    server.on('uncaughtException', function(req, res, route, err) {
      return res.send(500, {
        status: "error",
        statusText: err.message || err
      });
    });
    server.on('NotFound', function(req, res, next) {
      return next(res.send(404, {
        status: 'error',
        statusText: 'Endpoint not found'
      }));
    });
    server.on('MethodNotAllowed', function(req, res, next) {
      return next(res.send(404, {
        status: 'error',
        statusText: 'Endpoint not found'
      }));
    });
    server.on('VersionNotAllowed', function(req, res, next) {
      return next(res.send(404, {
        status: 'error',
        statusText: 'Endpoint not found'
      }));
    });
    server.on('after', function(req, res, route, err) {
      var time, _base, _ref;
      time = new Date - res._time;
      if (req.route == null) {
        req.route = {};
      }
      if ((_base = req.route).path == null) {
        _base.path = (_ref = req._path) != null ? _ref : '/';
      }
      if (res.logMessage == null) {
        res.logMessage = '';
      }
      console.log("" + req.method + " " + req.route.path + " (" + time + "ms): " + res.statusCode + " " + res.logMessage);
      if (res.statusCode.toString().slice(0, 1) !== '2') {
        if (res.bodyData && 0 > res.bodyData.indexOf('"Endpoint not found"')) {
          return console.error(res.bodyData);
        }
      }
    });
    server.use(restify.CORS());
    server.use(restify.fullResponse());
    server.use(restify.queryParser());
    return server.listen(port);
  })();

  (function() {
    var rates;
    rates = {};
    global.getRates = function(callback) {
      var defer;
      if (rates.expires > +(new Date)) {
        return callback(rates.rates);
      }
      if (!rates.promise) {
        defer = q.defer();
        rates.promise = defer.promise;
        client.get(path, function(err, req, res, obj) {
          var _ref, _ref1;
          if (err) {
            throw err.body.description || err.body.message || err.message || err;
          }
          if (!obj.rates) {
            throw 'Error: return did not contain rates';
          }
          disclaimer = (_ref = obj.disclaimer) != null ? _ref : disclaimer;
          license = (_ref1 = obj.license) != null ? _ref1 : license;
          rates = obj;
          rates.timestamp = new Date;
          rates.expires = (ttl * 1000) + +(new Date);
          return defer.resolve(rates.rates);
        });
      }
      return rates.promise.then(callback);
    };
    return global.getRatesAge = function() {
      var age, time, _ref;
      time = (_ref = rates.timestamp) != null ? _ref : new Date;
      age = (+(new Date)) - time;
      return Math.round(age / 1000);
    };
  })();

  server.get('/', function(req, res, next) {
    return next(res.send({
      description: description,
      disclaimer: disclaimer,
      license: license,
      routes: {
        convert: {
          description: 'Convert between two currencies',
          parameters: {
            from: 'Currency code of the original currency',
            to: 'Currency code to convert to',
            amount: 'Amount to be converted (optional, default = 1)',
            precision: 'What precision to round to (optional, default = 2)'
          }
        },
        rates: {
          description: 'List of rates known by the system'
        }
      }
    }));
  });

  server.get('/rates', function(req, res, next) {
    return getRates(function(rates) {
      var base_rate, code, rate;
      if (req.params.base != null) {
        if (!(base_rate = rates[req.params.base])) {
          return next(new restify.InvalidArgumentError("Unknown currency code '" + req.params.base + "'."));
        }
        for (code in rates) {
          rate = rates[code];
          rates[code] = parseFloat((rate / base_rate).toFixed(5));
        }
      }
      return next(res.send(rates));
    });
  });

  server.get('/convert', function(req, res, next) {
    var amount, from, precision, to, _ref, _ref1, _ref2, _ref3, _ref4;
    if (((_ref = req.params) != null ? _ref.from : void 0) == null) {
      return next(new restify.InvalidArgumentError('Request requires a "from" currency'));
    }
    if (((_ref1 = req.params) != null ? _ref1.to : void 0) == null) {
      return next(new restify.InvalidArgumentError('Request requires a "to" currency'));
    }
    from = req.params.from.toUpperCase();
    to = req.params.to.toUpperCase();
    amount = Number((_ref2 = (_ref3 = req.params.amount) != null ? _ref3 : req.params.value) != null ? _ref2 : 1);
    if (isNaN(amount)) {
      return next(new restify.InvalidArgumentError('Request "amount" must be a number.'));
    }
    precision = parseInt((_ref4 = req.params.precision) != null ? _ref4 : 2);
    if (isNaN(precision)) {
      return next(new restify.InvalidArgumentError('Request "precision" must be an integer'));
    }
    return getRates(function(rates) {
      var converted_amount, from_rate, to_rate;
      if (!(from_rate = rates[from])) {
        return next(new restify.InvalidArgumentError("Unknown currency code '" + from + "'."));
      }
      if (!(to_rate = rates[to])) {
        return next(new restify.InvalidArgumentError("Unknown currency code '" + to + "'."));
      }
      converted_amount = (amount / from_rate) * to_rate;
      converted_amount = parseFloat(converted_amount.toFixed(precision));
      return next(res.send({
        original: {
          amount: amount,
          currency: from,
          rate: from_rate
        },
        converted: {
          amount: converted_amount,
          currency: to,
          rate: to_rate
        },
        information: {
          disclaimer: disclaimer,
          license: license,
          age: getRatesAge() + 's',
          expires: (ttl - getRatesAge()) + 's'
        }
      }));
    });
  });

}).call(this);
